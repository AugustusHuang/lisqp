;;;; Utilities
;;;; Author: Augustus Huang
;;;; Date: May 22, 2015

(in-package :general-utilities)

(defmacro defun-memo (fn-name-options (&rest args) &body body)
  "Remember what have been done with 'this' function."
  (let ((vars (arglist-vars args)))
    (flet ((gen-body (fn-name &key (test '#'equal)
			      size key-exp)
	     `(eval-when (load eval compile)
		(setf (get ',fn-name 'memoize-table)
		      (make-hash-table :test ,test
				       ,@(when size `(:size ,size))))
		(defun ,fn-name ,args
		  (gethash-or-set-default
		   ,key-exp
		   (get ',fn-name 'memoize-table)
		   (progn ,@body))))))
      (cond ((consp fn-name-options)
	     (apply #'gen-body fn-name-options))
	    ((and (= (length vars) 1)
		  (not (member '&rest args)))
	     (gen-body fn-name-options :test '#'eql
		       :key-exp (first vars)))
	    (t
	     (gen-body fn-name-options :test '#'equal
		       :key-exp `(list* ,@vars)))))))

(defmacro gethash-or-set-default (key table default)
  "Get the value from table or set it to default value."
  (with-gensyms (keyvar tabvar val found-p)
    `(let ((keyvar ,key)
	   (tabvar ,table))
       (multiple-value-bind (val found-p)
	   (gethash keyvar tabvar)
	 (if found-p
	     val
	     (setf (gethash keyvar tabvar)
		   ,default))))))

(defun map-vec (fn vector &key (start 0) end)
  "Helper function of dovec."
  (loop for i from start below (or end (length vector))
       do (funcall fn (aref vector-var index))))

(defun matrix-*-2 (matrix1 matrix2)
  "Helper of matrix-*."
  )

(defun matrix-+-2 (matrix1 matrix2)
  "Helper of matrix-+."
  )

(defun matrix---2 (matrix1 matrix2)
  "Helper of matrix--."
  )

;;; APIs
(defmacro with-gensyms (symbols body)
  "Replace given symbols with gensyms."
  (sublis (mapcar #'(lambda (sym)
		      (cons sym (gensym (string sym))))
		  symbols)
	  body))

(defmacro dovec ((var vector &key (start 0) end) &body body)
  "Vector version of 'doxxx' macros."
  `(block nil
     (map-vec #'(lambda (,var) ,@body)
	      ,vector :start start :end end)))

(defun transposition (matrix)
  "Returns transposition a given matrix."
  )

(defun matrix-* (matrix1 &rest more-matrices)
  "Returns product of matrices, from left to right."
  )

(defun matrix-+ (matrix1 &rest more-matrices)
  "Returns sum of matrices."
  )

(defun matrix-- (matrix1 &rest more-matrices)
  "Returns m1 - (m2 + .. + mn)."
  )